IMPLEMENTATION OF taylor
BEGIN
	PROCEDURE sin;
		VAR x: number,
		    iterations: number,
		    result: number,
		    i: number,
		    j: number,
		    sign: number,
		    flip: number,
		    exponent: number,
		    delta: number,
		    numerator: number,
		    denominator: number;
                BEGIN
		    result := x;
		    i := iterations;
		    sign := 0 - 1;
		    from := 0;
		    exponent := 3;
		    delta := 2;
		    CALL loop
                END;
	PROCEDURE cos;
		VAR x: number,
		    iterations: number,
		    result: number,
		    i: number,
		    j: number,
		    sign: number,
		    flip: number,
		    exponent: number,
		    delta: number,
		    numerator: number,
		    denominator: number;
		result := 1;
		i := iterations;
		sign := 0 - 1;
		from := 0;
		exponent := 2;
		delta := 2;
		CALL loop;
	PROCEDURE exp;
		VAR x: number,
		    iterations: number,
		    result: number,
		    i: number,
		    j: number,
		    sign: number,
		    flip: number,
		    exponent: number,
		    delta: number,
		    numerator: number,
		    denominator: number;
		result := 1;
		i := iterations;
		sign := 1;
		from := 2;
		exponent := 1;
		delta := 1;
		CALL loop;
	PROCEDURE loop;
		WHILE i DO
			j := exponent;
			numerator := 1;
			WHILE j DO
				numerator := numerator * x;
				j := j - 1;
			END WHILE;
			j := exponent;
			denominator := 1;
			WHILE j DO
				numerator := numerator * j;
				j := j - 1;
			END WHILE;
			result := result +
				sign * numerator / denominator;
			i := i - 1;
			sign := from - sign;
			exponent := exponent + delta;
		END WHILE;
END
